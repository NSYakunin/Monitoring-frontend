import React, { useEffect, useState, useRef } from 'react'
import {
	HubConnection,
	HubConnectionBuilder,
	LogLevel,
} from '@microsoft/signalr'

const ChatWidget: React.FC = () => {
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∞–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	const [connection, setConnection] = useState<HubConnection | null>(null)
	// –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π [{ user, text }]
	const [messages, setMessages] = useState<
		Array<{ user: string; text: string }>
	>([])
	// –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
	const [messageInput, setMessageInput] = useState('')
	// –û—Ç–∫—Ä—ã—Ç–æ –ª–∏ –æ–∫–Ω–æ —á–∞—Ç–∞ (true) –∏–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ (false)
	const [isOpen, setIsOpen] = useState(false)

	// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏–º –≤ ref, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
	const usernameRef = useRef<string>('Anon')

	// –ü—Ä–∏ –º–∞—É–Ω—Ç–µ: —á–∏—Ç–∞–µ–º –∏–∑ localStorage "userName"
	useEffect(() => {
		const storedName = localStorage.getItem('userName')
		usernameRef.current = storedName || 'Anon'
	}, [])

	// –°–æ–∑–¥–∞—ë–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SignalR –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		const newConnection = new HubConnectionBuilder()
			// URL –∫ –≤–∞—à–µ–º—É —Ö–∞–±—É. –ú–µ–Ω—è–π—Ç–µ –ø–æ—Ä—Ç/–∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			.withUrl('http://localhost:5100/chatHub', {
				accessTokenFactory: () => {
					// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–∫–µ–Ω –∫ WebSocket –∑–∞–ø—Ä–æ—Å—É
					const token = localStorage.getItem('jwtToken')
					return token ?? ''
				},
			})
			.withAutomaticReconnect()
			.configureLogging(LogLevel.Information)
			.build()

		setConnection(newConnection)
	}, [])

	// –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ "ReceiveMessage"
	useEffect(() => {
		if (connection) {
			connection
				.start()
				.then(() => {
					console.log('SignalR Chat Connected.')

					// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ReceiveMessage (–ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
					connection.on('ReceiveMessage', (user: string, message: string) => {
						setMessages(prev => [...prev, { user, text: message }])
					})
				})
				.catch(err => console.error('SignalR Connection Error: ', err))
		}

		// –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
		return () => {
			connection?.off('ReceiveMessage')
		}
	}, [connection])

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	const sendMessage = async () => {
		if (!connection) return
		if (!messageInput.trim()) return

		try {
			// –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ SendMessage –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —Ö–∞–±–µ
			await connection.invoke('SendMessage', usernameRef.current, messageInput)
			// –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
			setMessageInput('')
		} catch (err) {
			console.error('SendMessage error:', err)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ input
	const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
		if (e.key === 'Enter') {
			e.preventDefault()
			sendMessage()
		}
	}

	return (
		<>
			{/* –ö–Ω–æ–ø–∫–∞ (floating) –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ */}
			<div style={styles.chatButtonContainer}>
				<button
					style={styles.chatButton}
					onClick={() => setIsOpen(!isOpen)}
					title='–û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç'
				>
					üí¨
				</button>
			</div>

			{/* –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ */}
			{isOpen && (
				<div style={styles.chatWindow}>
					<div style={styles.header}>
						<span>–û–±—â–∏–π —á–∞—Ç</span>
						<button style={styles.closeBtn} onClick={() => setIsOpen(false)}>
							‚úï
						</button>
					</div>

					<div style={styles.messagesContainer}>
						{messages.length === 0 && (
							<div style={{ textAlign: 'center', color: '#666' }}>
								–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
							</div>
						)}
						{messages.map((msg, idx) => (
							<div key={idx} style={styles.messageItem}>
								<strong>{msg.user}: </strong> {msg.text}
							</div>
						))}
					</div>

					<div style={styles.inputContainer}>
						<input
							type='text'
							style={styles.inputField}
							value={messageInput}
							onChange={e => setMessageInput(e.target.value)}
							onKeyPress={handleKeyPress}
							placeholder='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
						/>
						<button style={styles.sendBtn} onClick={sendMessage}>
							–û—Ç–ø—Ä–∞–≤–∏—Ç—å
						</button>
					</div>
				</div>
			)}
		</>
	)
}

// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ inline-—Å—Ç–∏–ª–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏). –ú–æ–∂–µ—Ç–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .css
const styles: { [key: string]: React.CSSProperties } = {
	chatButtonContainer: {
		position: 'fixed',
		bottom: '20px',
		right: '20px',
		zIndex: 9999, // <-- –í–æ—Ç –æ–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –ø–æ–≤–µ—Ä—Ö —Ç–∞–±–ª–∏—Ü—ã
	},
	chatButton: {
		backgroundColor: '#007bff',
		color: '#fff',
		borderRadius: '50%',
		width: '50px',
		height: '50px',
		fontSize: '20px',
		border: 'none',
		cursor: 'pointer',
		boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
	},
	chatWindow: {
		position: 'fixed',
		bottom: '80px',
		right: '20px',
		width: '300px',
		border: '1px solid #ccc',
		display: 'flex',
		flexDirection: 'column',
		boxShadow: '0 8px 24px rgba(0, 0, 0, 0.2)',
		backgroundColor: '#fff',
		zIndex: 9999, // <-- –ò –æ–∫–Ω–æ —á–∞—Ç–∞ —Ç–æ–∂–µ –Ω–∞–≤–µ—Ä—Ö—É
	},
	header: {
		backgroundColor: '#007bff',
		color: '#fff',
		padding: '8px',
		fontWeight: 'bold',
		display: 'flex',
		justifyContent: 'space-between',
		alignItems: 'center',
	},
	closeBtn: {
		background: 'transparent',
		border: 'none',
		color: '#fff',
		fontSize: '16px',
		cursor: 'pointer',
	},
	messagesContainer: {
		flex: 1,
		padding: '8px',
		overflowY: 'auto',
	},
	messageItem: {
		marginBottom: '6px',
		fontSize: '0.9rem',
	},
	inputContainer: {
		display: 'flex',
		borderTop: '1px solid #ccc',
	},
	inputField: {
		flex: 1,
		border: 'none',
		padding: '8px',
		outline: 'none',
	},
	sendBtn: {
		backgroundColor: '#28a745',
		border: 'none',
		color: '#fff',
		padding: '0 16px',
		cursor: 'pointer',
	},
}

export default ChatWidget
