import React, { useEffect, useState, useRef } from 'react'
import {
	HubConnection,
	HubConnectionBuilder,
	LogLevel,
	HubConnectionState,
} from '@microsoft/signalr'

// ==== –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ ====
interface ChatMessage {
	id: string
	user: string
	type: 'text' | 'file'
	text?: string
	fileName?: string
	fileType?: string
	base64Data?: string
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äì –ø—Ä–µ–≤—å—é, –∏–Ω–∞—á–µ ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ).
 */
const FileMessage: React.FC<{
	fileName: string
	fileType: string
	base64Data: string
}> = ({ fileName, fileType, base64Data }) => {
	// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	const isImage = fileType.startsWith('image/')

	// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
	const handleDownload = () => {
		const byteCharacters = atob(base64Data)
		const byteNumbers = new Array(byteCharacters.length)
		for (let i = 0; i < byteCharacters.length; i++) {
			byteNumbers[i] = byteCharacters.charCodeAt(i)
		}
		const byteArray = new Uint8Array(byteNumbers)
		const blob = new Blob([byteArray], { type: fileType })
		const url = URL.createObjectURL(blob)

		const link = document.createElement('a')
		link.href = url
		link.download = fileName
		link.click()
		URL.revokeObjectURL(url)
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-–ø—Ä–µ–≤—å—é; –∏–Ω–∞—á–µ ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
	return (
		<div style={{ display: 'inline-block' }}>
			{isImage ? (
				<img
					src={`data:${fileType};base64,${base64Data}`}
					alt={fileName}
					style={{ maxWidth: '150px', maxHeight: '150px', cursor: 'pointer' }}
					onClick={handleDownload}
					title='–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å'
				/>
			) : (
				<span
					style={{ textDecoration: 'underline', cursor: 'pointer' }}
					onClick={handleDownload}
					title='–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'
				>
					{fileName}
				</span>
			)}
		</div>
	)
}

/**
 * –ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏
 */
const EMOJIS = [
	'üòÄ',
	'üòÉ',
	'üòÑ',
	'üòÅ',
	'üòÜ',
	'üòÖ',
	'ü§£',
	'üòÇ',
	'üôÇ',
	'üòâ',
	'üòä',
	'üòá',
	'ü•∞',
	'üòç',
	'ü§©',
	'üòò',
	'üòú',
	'ü§™',
	'üòé',
	'ü§ì',
	'üò±',
	'üò¥',
	'üëç',
	'üëé',
	'‚ù§Ô∏è',
	'üî•',
	'üéâ',
	'üíØ',
	'üöÄ',
]

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ChatWidget, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SignalR,
 * —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –∏ –æ–∫–Ω–æ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.
 */
const ChatWidget: React.FC = () => {
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SignalR
	const [connection, setConnection] = useState<HubConnection | null>(null)
	// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	const [messages, setMessages] = useState<ChatMessage[]>([])
	// –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
	const [messageInput, setMessageInput] = useState('')
	// –û—Ç–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç
	const [isOpen, setIsOpen] = useState(false)
	// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–∫–Ω–æ —ç–º–æ–¥–∑–∏
	const [showEmojiPicker, setShowEmojiPicker] = useState(false)
	// –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	const [unreadCount, setUnreadCount] = useState(0)

	// –ö—Ç–æ –º—ã (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä—ë–º –∏–∑ localStorage)
	const usernameRef = useRef<string>('Anon')
	useEffect(() => {
		const storedName = localStorage.getItem('userName')
		usernameRef.current = storedName || 'Anon'
	}, [])

	// --------------------------------------------------------------------------------
	// –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø:
	// --------------------------------------------------------------------------------

	// –§–ª–∞–≥, –±—ã–ª –ª–∏ —á–∞—Ç "—Ö–æ—Ç—å —Ä–∞–∑" –ø–µ—Ä–µ—Ç–∞—â–µ–Ω
	const [hasBeenDragged, setHasBeenDragged] = useState(false)

	/**
	 * –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y) —Å—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫,
	 * —á—Ç–æ–±—ã –æ–∫–Ω–æ (—à–∏—Ä–∏–Ω–æ–π 360, –≤—ã—Å–æ—Ç–æ–π ~400) "—Å–∏–¥–µ–ª–æ" –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞.
	 * –¢–æ–≥–¥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–µ –±—É–¥–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø—Ä—ã–∂–∫–∞".
	 */
	const [position, setPosition] = useState(() => {
		const chatWidth = 360
		const chatHeight = 400 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ–±—â–∞—è –≤—ã—Å–æ—Ç–∞
		return {
			x: window.innerWidth - chatWidth - 20,
			y: window.innerHeight - chatHeight - 70,
		}
	})

	// –°–º–µ—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç—è–Ω—É—Ç—å
	const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
	// –ò–¥—ë—Ç –ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
	const [isDragging, setIsDragging] = useState(false)

	/**
	 * "–ó–∞–∂–∏–º" (clamp) –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [min, max].
	 */
	const clamp = (value: number, min: number, max: number) =>
		Math.max(min, Math.min(value, max))

	const onDragStart = (e: React.MouseEvent<HTMLDivElement>) => {
		e.preventDefault() // —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–µ–ª—è–ª—Å—è —Ç–µ–∫—Å—Ç –∏ –Ω–µ –±—ã–ª–æ "–≥–ª—é–∫–æ–≤"
		setHasBeenDragged(true)
		setIsDragging(true)
		setDragOffset({
			x: e.clientX - position.x,
			y: e.clientY - position.y,
		})
	}

	const onDrag = (e: React.MouseEvent<HTMLDivElement>) => {
		if (!isDragging) return

		// –£—á–∏—Ç—ã–≤–∞–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã —á–∞—Ç–∞ –¥–ª—è "–∑–∞–∂–∏–º–∞" –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
		const chatWidth = 360
		const chatHeight = 400 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è + —Ö–µ–¥–µ—Ä + –ø–æ–ª–µ –≤–≤–æ–¥–∞)

		let newX = e.clientX - dragOffset.x
		let newY = e.clientY - dragOffset.y

		newX = clamp(newX, 0, window.innerWidth - chatWidth)
		newY = clamp(newY, 0, window.innerHeight - chatHeight)

		setPosition({ x: newX, y: newY })
	}

	const onDragEnd = () => {
		setIsDragging(false)
	}

	// --------------------------------------------------------------------------------
	// –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	// --------------------------------------------------------------------------------

	// –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SignalR (–µ–¥–∏–Ω–æ–∂–¥—ã)
	useEffect(() => {
		if (connection) return

		const newConnection = new HubConnectionBuilder()
			.withUrl('http://localhost:5100/chatHub', {
				accessTokenFactory: () => {
					const token = localStorage.getItem('jwtToken')
					return token ?? ''
				},
			})
			.withAutomaticReconnect()
			.configureLogging(LogLevel.Information)
			.build()

		setConnection(newConnection)
	}, [connection])

	// –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
	useEffect(() => {
		if (!connection) return

		if (connection.state === HubConnectionState.Disconnected) {
			connection
				.start()
				.then(() => {
					console.log('SignalR Chat Connected.')
					// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
					connection.on('ReceiveMessage', handleReceiveMessage)
					connection.on('ReceiveFile', handleReceiveFile)
				})
				.catch(err => console.error('SignalR Connection Error: ', err))
		}

		return () => {
			if (connection) {
				connection.off('ReceiveMessage', handleReceiveMessage)
				connection.off('ReceiveFile', handleReceiveFile)
			}
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [connection])

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	const handleReceiveMessage = (user: string, message: string) => {
		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (user !== usernameRef.current) {
			setMessages(prev => [
				...prev,
				{ id: Date.now().toString(), user, type: 'text', text: message },
			])
			if (!isOpen) {
				setUnreadCount(count => count + 1)
			}
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞
	const handleReceiveFile = (
		user: string,
		fileName: string,
		fileType: string,
		base64Data: string
	) => {
		// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏—Å–ª–∞–ª –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (user !== usernameRef.current) {
			setMessages(prev => [
				...prev,
				{
					id: Date.now().toString(),
					user,
					type: 'file',
					fileName,
					fileType,
					base64Data,
				},
			])
			if (!isOpen) {
				setUnreadCount(count => count + 1)
			}
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	const sendMessage = async () => {
		if (!connection || !messageInput.trim()) return
		try {
			await connection.invoke('SendMessage', usernameRef.current, messageInput)
			// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±–µ –ª–æ–∫–∞–ª—å–Ω–æ
			setMessages(prev => [
				...prev,
				{
					id: Date.now().toString(),
					user: usernameRef.current,
					type: 'text',
					text: messageInput,
				},
			])
			setMessageInput('')
		} catch (err) {
			console.error('SendMessage error:', err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
	const sendFile = async (file: File) => {
		if (!connection || !file) return
		try {
			const reader = new FileReader()
			reader.onload = async () => {
				if (typeof reader.result === 'string') {
					const base64str = reader.result.split(',')[1] || ''
					const mimeType = file.type

					await connection.invoke(
						'SendFile',
						usernameRef.current,
						file.name,
						mimeType,
						base64str
					)

					// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
					setMessages(prev => [
						...prev,
						{
							id: Date.now().toString(),
							user: usernameRef.current,
							type: 'file',
							fileName: file.name,
							fileType: mimeType,
							base64Data: base64str,
						},
					])
				}
			}
			reader.readAsDataURL(file)
		} catch (err) {
			console.error('SendFile error:', err)
		}
	}

	// –ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
	const toggleChat = () => {
		if (!isOpen) {
			setUnreadCount(0)
		}
		setIsOpen(!isOpen)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
	const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
		if (e.key === 'Enter') {
			e.preventDefault()
			sendMessage()
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (—á–µ—Ä–µ–∑ input[type=file])
	const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0]
		if (file) {
			sendFile(file)
			e.target.value = ''
		}
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
	const addEmoji = (emojiSymbol: string) => {
		setMessageInput(prev => prev + emojiSymbol)
	}

	// --------------------------------------------------------------------------------
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∏–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
	// --------------------------------------------------------------------------------

	const messagesEndRef = useRef<HTMLDivElement | null>(null)

	useEffect(() => {
		messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
	}, [messages])

	// --------------------------------------------------------------------------------
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞ —á–∞—Ç–∞:
	// --------------------------------------------------------------------------------
	const chatWindowStyle: React.CSSProperties = {
		...styles.chatWindow,
		position: 'fixed',
		/**
		 * –ï—Å–ª–∏ –æ–∫–Ω–æ –ù–ï –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–æ –Ω–∏ —Ä–∞–∑—É, –∫—Ä–µ–ø–∏–º –µ–≥–æ —Å–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ).
		 * –ï—Å–ª–∏ –æ–∫–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã top/left –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
		 */
		...(hasBeenDragged
			? { top: `${position.y}px`, left: `${position.x}px` }
			: { bottom: '70px', right: '20px' }),
		// –£–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:
		cursor: isDragging ? 'grabbing' : 'default',
	}

	return (
		<>
			{/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª) */}
			<div style={styles.chatButtonContainer}>
				<button
					style={{
						...styles.chatButton,
						...(unreadCount > 0 ? styles.chatButtonUnread : {}),
					}}
					onClick={toggleChat}
					title='–û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç'
				>
					{unreadCount > 0 ? `üí¨ (${unreadCount})` : 'üí¨'}
				</button>
			</div>

			{/* –û–∫–Ω–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ */}
			{isOpen && (
				<div
					style={chatWindowStyle}
					className='chat-window-animation'
					// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –≤—Å—é –æ–±–ª–∞—Å—Ç—å –æ–∫–Ω–∞
					onMouseMove={onDrag}
					onMouseUp={onDragEnd}
				>
					{/* –®–∞–ø–∫–∞ —á–∞—Ç–∞ (–∑–∞ –Ω–µ—ë "—Ç—è–Ω–µ–º" –æ–∫–Ω–æ) */}
					<div
						style={styles.header}
						onMouseDown={onDragStart}
						onMouseUp={onDragEnd}
					>
						<span>–ß–∞—Ç–∏–∫</span>
						<button style={styles.closeBtn} onClick={toggleChat}>
							‚úï
						</button>
					</div>

					{/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
					<div style={styles.messagesContainer}>
						{messages.length === 0 && (
							<div style={{ textAlign: 'center', color: '#aaa' }}>
								–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
							</div>
						)}
						{messages.map((msg, idx) => (
							<div
								key={msg.id}
								style={{
									...styles.messageItem,
									animationDelay: `${0.02 * idx}s`,
								}}
								className='fade-in-message'
							>
								<strong>{msg.user}:</strong>{' '}
								{msg.type === 'text' && <span>{msg.text}</span>}
								{msg.type === 'file' && (
									<FileMessage
										fileName={msg.fileName!}
										fileType={msg.fileType!}
										base64Data={msg.base64Data!}
									/>
								)}
							</div>
						))}
						{/* "–Ø–∫–æ—Ä—å" –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –≤–Ω–∏–∑ */}
						<div ref={messagesEndRef} />
					</div>

					{/* –ü–æ–ª–µ –≤–≤–æ–¥–∞, –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤, —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
					<div style={styles.inputContainer}>
						<label style={styles.fileLabel}>
							üìé
							<input
								type='file'
								style={{ display: 'none' }}
								onChange={handleFileChange}
							/>
						</label>

						<input
							type='text'
							style={styles.inputField}
							value={messageInput}
							onChange={e => setMessageInput(e.target.value)}
							onKeyPress={handleKeyPress}
							placeholder='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
						/>

						{/* –ö–Ω–æ–ø–∫–∞ —ç–º–æ–¥–∑–∏ */}
						<button
							style={styles.emojiBtn}
							onClick={() => setShowEmojiPicker(!showEmojiPicker)}
							title='–í—Å—Ç–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏'
						>
							üòÉ
						</button>

						{/* –û–∫–Ω–æ —Å —ç–º–æ–¥–∑–∏ */}
						{showEmojiPicker && (
							<div style={styles.emojiPicker} className='fade-in-emoji'>
								{EMOJIS.map((emoji, i) => (
									<span
										key={i}
										style={styles.emojiItem}
										onClick={() => {
											addEmoji(emoji)
											setShowEmojiPicker(false)
										}}
									>
										{emoji}
									</span>
								))}
							</div>
						)}

						{/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
						<button style={styles.sendBtn} onClick={sendMessage}>
							–û—Ç–ø—Ä–∞–≤–∏—Ç—å
						</button>
					</div>
				</div>
			)}

			{/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∏–ª–∏/–∞–Ω–∏–º–∞—Ü–∏–∏ */}
			<style>{`
        /* –ê–Ω–∏–º–∞—Ü–∏—è –æ–∫–Ω–∞ —á–∞—Ç–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ */
        .chat-window-animation {
          animation: slideUp 0.4s ease forwards;
        }
        @keyframes slideUp {
          from { transform: translateY(50px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }

        /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è */
        .fade-in-message {
          animation: fadeIn 0.3s forwards;
        }
        @keyframes fadeIn {
          from {opacity: 0; transform: translateY(5px);}
          to {opacity: 1; transform: translateY(0);}
        }

        /* –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö */
        @keyframes pulse {
          0% {
            transform: scale(1);
            box-shadow: 0 0 0 rgba(255, 0, 0, 0.7);
          }
          50% {
            transform: scale(1.08);
            box-shadow: 0 0 15px rgba(255, 0, 0, 0.8);
          }
          100% {
            transform: scale(1);
            box-shadow: 0 0 0 rgba(255, 0, 0, 0.7);
          }
        }
      `}</style>
		</>
	)
}

/**
 * –ù–∞–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è —á–∞—Ç–∞ (—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ + —Ñ–∏–∫—Å–∞—Ü–∏—è –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
 */
const styles: { [key: string]: React.CSSProperties } = {
	chatButtonContainer: {
		position: 'fixed',
		bottom: '15px',
		right: '15px',
		zIndex: 9999,
	},
	chatButton: {
		backgroundColor: '#2196f3',
		color: '#fff',
		borderRadius: '50%',
		width: '50px',
		height: '50px',
		fontSize: '18px',
		border: 'none',
		cursor: 'pointer',
		boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
		position: 'relative',
	},
	chatButtonUnread: {
		animation: 'pulse 1.5s infinite',
	},
	chatWindow: {
		width: '360px',
		display: 'flex',
		flexDirection: 'column',
		boxShadow: '0 8px 24px rgba(0, 0, 0, 0.4)',
		backgroundColor: '#2b2b2b',
		zIndex: 9999,
		borderRadius: '6px',
	},
	header: {
		backgroundColor: '#555',
		color: '#fff',
		padding: '8px',
		fontWeight: 'bold',
		display: 'flex',
		justifyContent: 'space-between',
		alignItems: 'center',
		borderTopLeftRadius: '6px',
		borderTopRightRadius: '6px',
		cursor: 'grab', // —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ "—Ç—è–Ω—É—Ç—å"
	},
	closeBtn: {
		background: 'transparent',
		border: 'none',
		color: '#fff',
		fontSize: '16px',
		cursor: 'pointer',
	},
	messagesContainer: {
		flex: 1,
		padding: '8px',
		overflowY: 'auto',
		maxHeight: '300px',
		backgroundColor: '#2b2b2b',
	},
	messageItem: {
		marginBottom: '10px',
		fontSize: '0.9rem',
		padding: '6px 8px',
		borderRadius: '4px',
		background: '#3b3b3b',
		color: '#fff',
	},
	inputContainer: {
		display: 'flex',
		alignItems: 'center',
		padding: '4px 8px',
		gap: '4px',
		borderTop: '1px solid #444',
		backgroundColor: '#333',
		borderBottomLeftRadius: '6px',
		borderBottomRightRadius: '6px',
	},
	fileLabel: {
		cursor: 'pointer',
		fontSize: '1.2rem',
		color: '#fff',
	},
	inputField: {
		flex: 1,
		border: '1px solid #444',
		padding: '8px',
		outline: 'none',
		fontSize: '0.9rem',
		backgroundColor: '#1f1f1f',
		color: '#fff',
		borderRadius: '4px',
	},
	emojiBtn: {
		backgroundColor: 'transparent',
		border: 'none',
		fontSize: '1.3rem',
		cursor: 'pointer',
		outline: 'none',
		color: '#fff',
		padding: '0 8px',
	},
	emojiPicker: {
		position: 'absolute',
		bottom: '45px',
		right: '90px', // —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ª–æ–Ω—è—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
		backgroundColor: '#2b2b2b',
		border: '1px solid #444',
		borderRadius: '8px',
		padding: '8px',
		width: '180px',
		display: 'flex',
		flexWrap: 'wrap',
		boxShadow: '0 4px 12px rgba(0,0,0,0.5)',
		zIndex: 99999,
	},
	emojiItem: {
		fontSize: '1.2rem',
		margin: '4px',
		cursor: 'pointer',
	},
	sendBtn: {
		backgroundColor: '#4caf50',
		border: 'none',
		color: '#fff',
		padding: '8px 12px',
		cursor: 'pointer',
		borderRadius: '4px',
		fontSize: '0.9rem',
		outline: 'none',
	},
}

export default ChatWidget
