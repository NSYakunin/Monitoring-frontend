import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import {
	getAllowedDivisions,
	getApprovers,
	getExecutors,
	getFilteredWorkItems,
	WorkItemDto,
} from '../../api/workItemsApi'
import './HomePage.css'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è "—Ñ–∏–ª—å—Ç—Ä–æ–≤"
interface FilterState {
	selectedDivision: number
	startDate: string
	endDate: string
	executor: string
	approver: string
	search: string
}

const HomePage: React.FC = () => {
	const navigate = useNavigate()

	// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	const [allowedDivisions, setAllowedDivisions] = useState<number[]>([])

	// –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π / –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ division)
	const [executorsList, setExecutorsList] = useState<string[]>([])
	const [approversList, setApproversList] = useState<string[]>([])

	// –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç (WorkItems)
	const [workItems, setWorkItems] = useState<WorkItemDto[]>([])

	// –§–∏–ª—å—Ç—Ä—ã
	const [filters, setFilters] = useState<FilterState>({
		selectedDivision: 0, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, –ø–æ—Ç–æ–º –ø–æ–¥—Å—Ç–∞–≤–∏–º
		startDate: '', // –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –Ω–∞ –±—ç–∫–µ –±—É–¥–µ—Ç 2014-01-01
		endDate: '', // –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –Ω–∞ –±—ç–∫–µ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
		executor: '',
		approver: '',
		search: '',
	})

	// –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	useEffect(() => {
		const token = localStorage.getItem('jwtToken')
		if (!token) {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
			navigate('/login')
			return
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ AllowedDivisions
		getAllowedDivisions()
			.then(divs => {
				setAllowedDivisions(divs)

				// –°–º–æ—Ç—Ä–∏–º, –±—ã–ª –ª–∏ divisionId –≤ localStorage:
				const storedDivId = localStorage.getItem('divisionId')
				let divIdFromStorage = 0
				if (storedDivId) {
					divIdFromStorage = parseInt(storedDivId, 10)
				}

				// –ï—Å–ª–∏ divIdFromStorage –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ allowedDivisions ‚Äì
				// –±–µ—Ä—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞.
				let defaultDiv = divs[0] || 0
				if (divs.includes(divIdFromStorage)) {
					defaultDiv = divIdFromStorage
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedDivision
				setFilters(prev => ({
					...prev,
					selectedDivision: defaultDiv,
				}))
			})
			.catch(err => console.error(err))
	}, [navigate])

	// –ö–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è selectedDivision ‚Äì –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö
	useEffect(() => {
		if (!filters.selectedDivision) return

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
		getExecutors(filters.selectedDivision)
			.then(execs => setExecutorsList(execs))
			.catch(err => console.error(err))

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö
		getApprovers(filters.selectedDivision)
			.then(apprs => setApproversList(apprs))
			.catch(err => console.error(err))

		// –ò —Å—Ä–∞–∑—É –≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç (—Å —É—á—ë—Ç–æ–º –Ω–∞—à–∏—Ö startDate, endDate –∏ —Ç.–¥.)
		loadWorkItems()
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [filters.selectedDivision])

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ workItems
	const loadWorkItems = () => {
		getFilteredWorkItems(
			filters.startDate,
			filters.endDate,
			filters.executor,
			filters.approver,
			filters.search
		)
			.then(data => {
				console.log('–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ:', data)
				setWorkItems(data)
			})
			.catch(err => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', err)
				// –ï—Å–ª–∏ 401 –∏–ª–∏ 403, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å navigate('/login')
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π —Ñ–∏–ª—å—Ç—Ä–∞
	const handleChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
	) => {
		const { name, value } = e.target
		setFilters(prev => ({
			...prev,
			[name]: value,
		}))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	const handleSearchClick = () => {
		loadWorkItems()
	}

	// –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" ‚Äì —á–∏—Å—Ç–∏–º localStorage –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ /login
	const handleLogout = () => {
		localStorage.removeItem('jwtToken')
		localStorage.removeItem('userName')
		localStorage.removeItem('divisionId')
		// –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—Å—ë –ø–æ—á–∏—Å—Ç–∏—Ç—å:
		// localStorage.clear()

		navigate('/login')
	}

	return (
		<div>
			<div className='d-flex justify-content-between align-items-center mb-3'>
				<h3>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
				<button className='btn btn-outline-danger' onClick={handleLogout}>
					–í—ã—Ö–æ–¥
				</button>
			</div>

			{/* –ë–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
			<div className='mb-4 filters-container'>
				<form className='d-flex flex-wrap align-items-end gap-3'>
					<div className='filter-block'>
						<label htmlFor='startDate' className='form-label'>
							C –¥–∞—Ç—ã:
						</label>
						<input
							type='date'
							id='startDate'
							name='startDate'
							value={filters.startDate}
							onChange={handleChange}
							className='form-control'
						/>
					</div>

					<div className='filter-block'>
						<label htmlFor='endDate' className='form-label'>
							–ü–æ –¥–∞—Ç—É:
						</label>
						<input
							type='date'
							id='endDate'
							name='endDate'
							value={filters.endDate}
							onChange={handleChange}
							className='form-control'
						/>
					</div>

					<div className='filter-block'>
						<label htmlFor='divisionId' className='form-label'>
							–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:
						</label>
						<select
							id='selectedDivision'
							name='selectedDivision'
							value={String(filters.selectedDivision)}
							onChange={e =>
								setFilters(prev => ({
									...prev,
									selectedDivision: Number(e.target.value),
								}))
							}
							className='form-select'
						>
							{allowedDivisions.map(divId => (
								<option key={divId} value={divId}>
									–û—Ç–¥–µ–ª {divId}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='executor' className='form-label'>
							–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:
						</label>
						<select
							id='executor'
							name='executor'
							value={filters.executor}
							onChange={handleChange}
							className='form-select'
						>
							<option value=''>–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</option>
							{executorsList.map(e => (
								<option key={e} value={e}>
									{e}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='approver' className='form-label'>
							–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π:
						</label>
						<select
							id='approver'
							name='approver'
							value={filters.approver}
							onChange={handleChange}
							className='form-select'
						>
							<option value=''>–í—Å–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ</option>
							{approversList.map(a => (
								<option key={a} value={a}>
									{a}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='search' className='form-label'>
							–ü–æ–∏—Å–∫:
						</label>
						<input
							type='text'
							id='search'
							name='search'
							value={filters.search}
							onChange={handleChange}
							placeholder='–ü–æ–∏—Å–∫...'
							className='form-control'
						/>
					</div>

					<div>
						<button
							type='button'
							className='btn btn-primary'
							onClick={handleSearchClick}
						>
							–ü—Ä–∏–º–µ–Ω–∏—Ç—å
						</button>
					</div>
				</form>
			</div>

			{/* –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–±–æ—Ç–∞–º–∏ */}
			<div className='table-responsive'>
				<table className='table table-bordered table-hover sticky-header-table'>
					<thead>
						<tr className='custom-header'>
							<th>‚Ññ</th>
							<th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</th>
							<th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</th>
							<th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</th>
							<th>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π</th>
							<th>–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π</th>
							<th>–ü–ª–∞–Ω</th>
							<th>–ö–æ—Ä—Ä1</th>
							<th>–ö–æ—Ä—Ä2</th>
							<th>–ö–æ—Ä—Ä3</th>
							<th>
								<span className='toggle-all-btn' title='–í—ã–¥–µ–ª–∏—Ç—å/—Å–Ω—è—Ç—å –≤—Å–µ'>
									üìå
								</span>
							</th>
						</tr>
					</thead>
					<tbody>
						{workItems.map((item, index) => {
							// –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–≤–µ—Å–∏—Ç—å —É—Å–ª–æ–≤–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
							const highlightClass = ''

							return (
								<tr key={index} className={highlightClass}>
								<td>{index + 1}</td>
								<td>{item.documentName}</td>
								<td>{item.workName}</td>
								<td>
										{item.executor?.split(',').map((ex, i) => (
										<div key={i}>{ex.trim()}</div>
									))}
								</td>
								<td>{item.controller}</td>
								<td>{item.approver}</td>
								<td>{item.planDate}</td>
								<td>{item.korrect1}</td>
								<td>{item.korrect2}</td>
								<td>{item.korrect3}</td>
								<td>
									<input type='checkbox' />
									{/* –ö–Ω–æ–ø–∫–∞ "–∑–∞—è–≤–∫–∞" (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) */}
									<button
										type='button'
										className='btn btn-sm btn-outline-secondary ms-2'
									>
										üìù
									</button>
								</td>
							</tr>
							)
						})}
					</tbody>
				</table>
			</div>
		</div>
	)
}

export default HomePage
