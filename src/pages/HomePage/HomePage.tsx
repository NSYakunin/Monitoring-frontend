// src/pages/HomePage/HomePage.tsx
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import {
	getAllowedDivisions,
	getApprovers,
	getExecutors,
	getFilteredWorkItems,
	WorkItemDto,
} from '../../api/workItemsApi'
import './HomePage.css'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
interface FilterState {
	selectedDivision: number
	startDate: string
	endDate: string
	executor: string
	approver: string
	search: string
}

const HomePage: React.FC = () => {
	const navigate = useNavigate()

	// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
	const [allowedDivisions, setAllowedDivisions] = useState<number[]>([])

	// –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π / –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö
	const [executorsList, setExecutorsList] = useState<string[]>([])
	const [approversList, setApproversList] = useState<string[]>([])

	// –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç
	const [workItems, setWorkItems] = useState<WorkItemDto[]>([])

	// –§–∏–ª—å—Ç—Ä—ã
	const [filters, setFilters] = useState<FilterState>({
		selectedDivision: 0,
		startDate: '',
		endDate: '',
		executor: '',
		approver: '',
		search: '',
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		const token = localStorage.getItem('jwtToken')
		if (!token) {
			navigate('/login')
			return
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ AllowedDivisions
		getAllowedDivisions()
			.then(divs => {
				setAllowedDivisions(divs)

				// –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å divisionId –∏–∑ localStorage
				const storedDivId = localStorage.getItem('divisionId')
				let divIdFromStorage = 0
				if (storedDivId) {
					divIdFromStorage = parseInt(storedDivId, 10)
				}

				// –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
				let defaultDiv = divs[0] || 0
				if (divs.includes(divIdFromStorage)) {
					defaultDiv = divIdFromStorage
				}

				setFilters(prev => ({ ...prev, selectedDivision: defaultDiv }))
			})
			.catch(err => console.error(err))
	}, [navigate])

	// –ü—Ä–∏ —Å–º–µ–Ω–µ selectedDivision ‚Äì –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π/–ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö
	useEffect(() => {
		if (!filters.selectedDivision) return

		getExecutors(filters.selectedDivision)
			.then(execs => setExecutorsList(execs))
			.catch(err => console.error(err))

		getApprovers(filters.selectedDivision)
			.then(apprs => setApproversList(apprs))
			.catch(err => console.error(err))
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [filters.selectedDivision])

	// –ü—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ filters (–≤–∫–ª—é—á–∞—è selectedDivision), –ø–æ–¥–≥—Ä—É–∂–∞–µ–º workItems
	useEffect(() => {
		// –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –Ω–µ –≥—Ä—É–∑–∏–º
		if (!filters.selectedDivision) return

		loadWorkItems()
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [filters])

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	const loadWorkItems = () => {
		getFilteredWorkItems(
			filters.startDate,
			filters.endDate,
			filters.executor,
			filters.approver,
			filters.search
		)
			.then(data => {
				console.log('–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ:', data)
				setWorkItems(data)
			})
			.catch(err => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', err)
				// –ï—Å–ª–∏ 401/403 ‚Äì –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ª–æ–≥–∏–Ω
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø–æ–ª—è
	const handleChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
	) => {
		const { name, value } = e.target
		setFilters(prev => ({
			...prev,
			[name]: value,
		}))
	}

	// –í—ã—Ö–æ–¥
	const handleLogout = () => {
		localStorage.removeItem('jwtToken')
		localStorage.removeItem('userName')
		localStorage.removeItem('divisionId')
		navigate('/login')
	}

	// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
	const handleMyRequests = () => {
		navigate('/my-requests')
	}

	return (
		<div>
			<div className='d-flex justify-content-between align-items-center mb-3'>
				<h3>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
				<div>
					<button
						className='btn btn-outline-primary me-2'
						onClick={handleMyRequests}
					>
						–ú–æ–∏ –∑–∞—è–≤–∫–∏
					</button>
					<button className='btn btn-outline-danger' onClick={handleLogout}>
						–í—ã—Ö–æ–¥
					</button>
				</div>
			</div>

			{/* –ë–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
			<div className='mb-4 filters-container'>
				<form className='d-flex flex-wrap align-items-end gap-3'>
					<div className='filter-block'>
						<label htmlFor='startDate' className='form-label'>
							C –¥–∞—Ç—ã:
						</label>
						<input
							type='date'
							id='startDate'
							name='startDate'
							value={filters.startDate}
							onChange={handleChange}
							className='form-control'
						/>
					</div>

					<div className='filter-block'>
						<label htmlFor='endDate' className='form-label'>
							–ü–æ –¥–∞—Ç—É:
						</label>
						<input
							type='date'
							id='endDate'
							name='endDate'
							value={filters.endDate}
							onChange={handleChange}
							className='form-control'
						/>
					</div>

					<div className='filter-block'>
						<label htmlFor='divisionId' className='form-label'>
							–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:
						</label>
						<select
							id='selectedDivision'
							name='selectedDivision'
							value={String(filters.selectedDivision)}
							onChange={e =>
								setFilters(prev => ({
									...prev,
									selectedDivision: Number(e.target.value),
								}))
							}
							className='form-select'
						>
							{allowedDivisions.map(divId => (
								<option key={divId} value={divId}>
									–û—Ç–¥–µ–ª {divId}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='executor' className='form-label'>
							–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:
						</label>
						<select
							id='executor'
							name='executor'
							value={filters.executor}
							onChange={handleChange}
							className='form-select'
						>
							<option value=''>–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</option>
							{executorsList.map(e => (
								<option key={e} value={e}>
									{e}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='approver' className='form-label'>
							–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π:
						</label>
						<select
							id='approver'
							name='approver'
							value={filters.approver}
							onChange={handleChange}
							className='form-select'
						>
							<option value=''>–í—Å–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ</option>
							{approversList.map(a => (
								<option key={a} value={a}>
									{a}
								</option>
							))}
						</select>
					</div>

					<div className='filter-block'>
						<label htmlFor='search' className='form-label'>
							–ü–æ–∏—Å–∫:
						</label>
						<input
							type='text'
							id='search'
							name='search'
							value={filters.search}
							onChange={handleChange}
							placeholder='–ü–æ–∏—Å–∫...'
							className='form-control'
						/>
					</div>
				</form>
			</div>

			{/* –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–±–æ—Ç–∞–º–∏ */}
			<div className='table-responsive'>
				<table className='table table-bordered table-hover sticky-header-table'>
					<thead>
						<tr className='custom-header'>
							<th>‚Ññ</th>
							<th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</th>
							<th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</th>
							<th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</th>
							<th>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π</th>
							<th>–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π</th>
							<th>–ü–ª–∞–Ω</th>
							<th>–ö–æ—Ä—Ä1</th>
							<th>–ö–æ—Ä—Ä2</th>
							<th>–ö–æ—Ä—Ä3</th>
							<th>
								<span className='toggle-all-btn' title='–í—ã–¥–µ–ª–∏—Ç—å/—Å–Ω—è—Ç—å –≤—Å–µ'>
									üìå
								</span>
							</th>
						</tr>
					</thead>
					<tbody>
						{workItems.map((item, index) => {
							// –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫
							return (
								<tr key={index}>
									<td>{index + 1}</td>
									<td>{item.documentName}</td>
									<td>{item.workName}</td>
									<td>
										{item.executor?.split(',').map((ex, i) => (
											<div key={i}>{ex.trim()}</div>
										))}
									</td>
									<td>{item.controller}</td>
									<td>{item.approver}</td>
									<td>{item.planDate}</td>
									<td>{item.korrect1}</td>
									<td>{item.korrect2}</td>
									<td>{item.korrect3}</td>
									<td>
										<input type='checkbox' />
										{/* –ö–Ω–æ–ø–∫–∞ "–∑–∞—è–≤–∫–∞" (–∑–∞–≥–ª—É—à–∫–∞) */}
										<button
											type='button'
											className='btn btn-sm btn-outline-secondary ms-2'
										>
											üìù
										</button>
									</td>
								</tr>
							)
						})}
					</tbody>
				</table>
			</div>
		</div>
	)
}

export default HomePage
